package main

import (
	"context"
	"fmt"
	"log"
	"net"
	"sync"

	"google.golang.org/grpc"
	pb "path/to/input_service_pb"
)

type server struct {
	userNameCache map[string]string
	mu            sync.Mutex
}

func (s *server) GetName(ctx context.Context, in *pb.NameRequest) (*pb.NameReply, error) {
	s.mu.Lock()
	defer s.mu.Unlock()
	s.userNameCache["name"] = in.Name
	return &pb.NameReply{Name: in.Name}, nil
}

func main() {
	lis, err := net.Listen("tcp", ":50051")
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}
	s := &server{userNameCache: make(map[string]string)}
	grpcServer := grpc.NewServer()
	pb.RegisterInputServiceServer(grpcServer, s)
	if err := grpcServer.Serve(lis); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}
